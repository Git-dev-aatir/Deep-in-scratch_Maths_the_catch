## **02\_preprocessing.md**

# 🧹 **Data Preprocessing Module — Documentation**

---

## **1. Overview**

This module offers **reusable, templated preprocessing functions** for C++ datasets of numeric (`int`, `double`) or `std::string` types. It includes:

1. **Standardization (Z-score scaling)**
2. **Normalization (Min-Max scaling)**
3. **Missing value detection**
4. **Missing value imputation** (Mean, Median, Mode)
5. **Descriptive statistics generation**

---

## **2. Files Involved**

```
/include/preprocessing.h
/include/dataset_utils.h
```

---

## **3. Features**

### 🔹 **Missing Value Detection: `isMissing<T>()`**

| Type     | Missing Condition               |
| -------- | ------------------------------- |
| Floating | `NaN` (`std::isnan()`)          |
| Integral | `std::numeric_limits<T>::min()` |
| String   | Empty string `""`               |

---

### 🔹 **Standardization: `standardize()`**

✔️ Applies **Z-score scaling** to numeric columns.

$$
z = \frac{x - \mu}{\sigma}
$$

✔️ Automatically applies to **all columns if none specified**.

---

### 🔹 **Normalization: `normalize()`**

✔️ Applies **Min-Max scaling** to numeric columns.

$$
x' = \frac{x - x_{min}}{x_{max} - x_{min}}
$$

✔️ Automatically applies to **all columns if none specified**.

---

### 🔹 **Missing Value Detection: `findMissingValues()`**

✔️ Prints row/column locations of missing values.

---

### 🔹 **Missing Value Imputation: `replaceMissingValues()`**

✔️ Replaces missing values with:

* `MEAN`
* `MEDIAN`
* `MODE`

✔️ Only works for **numeric types**.

---

### 🔹 **Descriptive Statistics: `describeDataset()`**

✔️ Computes for numeric columns:

* Min, Max
* Mean, Median
* 25th percentile (Q1), 75th percentile (Q3)

---

## **4. Enums**

```cpp
enum class ImputeStrategy { MEAN, MEDIAN, MODE };
```

---

## **5. Usage Example**

```cpp
Dataset<double> data = { {1.0, 2.0, NAN}, {4.0, 5.0, 6.0}, {NAN, 8.0, 9.0} };

findMissingValues(data);
replaceMissingValues(data, ImputeStrategy::MEAN);
standardize(data);
describeDataset(data);
```

---

## **6. Challenges & Solutions**

| Issue                                                     | Solution                                           |
| --------------------------------------------------------- | -------------------------------------------------- |
| `if constexpr` errors during template usage.              | Ensured **C++17** in compilation.                  |
| Non-numeric types mistakenly passed to numeric functions. | Added **`static_assert`** checks.                  |
| Detecting "missing" for string/int/double differently.    | Used **template specialization** in `isMissing()`. |

---

## **7. To-Do / Future Plans**

* Outlier detection (Z-Score, IQR method).
* Categorical feature encoding (One-hot, Label Encoding).
* File-based preprocessing save/load support.

---

## **8. Known Limitations**

* No categorical feature handling.
* Imputation only for numeric types.
* Outlier handling pending.

---

## **9. Version**

* **v1.0** — Base preprocessing utilities completed.

---

---

## ✅ **Final Notes (For Both Modules)**

| Aspect                     | Dataset Utility                | Preprocessing Module |
| -------------------------- | ------------------------------ | -------------------- |
| **Binary Save/Load**       | ✔️                             | ❌                    |
| **Train/Test Split**       | ✔️                             | ❌                    |
| **Preprocessing**          | ❌                              | ✔️ (Scale/Impute)    |
| **Missing Value Handling** | ❌                              | ✔️                   |
| **Template Support**       | ✔️ (`int`, `double`, `string`) | ✔️ (same)            |
| **Outlier Detection**      | ❌                              | ❌ (Planned)          |

